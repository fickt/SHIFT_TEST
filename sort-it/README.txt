Версия Java: 11

Как работает приложение?

1) находите папку CFT-test\sort-it\out\artifacts\sort_it_jar (в эту папку заходим)
2) Оттуда запускаете командную строку
3) Прописываете java -jar sort-it.jar (тип сортировки) (тип данных в файлах) (путь до выходного файла) (пути/путь до входных файлов)
4) Должно получится что-то типа java -jar sort-it.jar -a -s C:\Users\Desktop\out.txt C:\Users\Desktop\in.txt C:\Users\Desktop\in2.txt


Некоторые ̶б̶а̶г̶и̶  детали по работе приложения: 

1) Аргументы строго в указаном порядке, любая несостыковка, будет сообщение "Некорректные аргументы" и приложение завершится
2) Аргумент с сортировкой опционален, можно не указывать
3) Если файлы предварительно отсортированы как -d, но указать тип сортировки -a, он выведет миллион сообщений, что тот или иной символ - невалиден
4) Если указать не тот тип данных, из которых состоят входные файлы, произойдет примерно как в 3 пункте. Хотя если работать с int, но указать String, то int будет отсортирован по длине числа, а не по значению
5) Практически все нештатные ситуации обработаны и вряд-ли приложение молча упадёт, хотя если постараться.. :)

Что не удалось реализовать: 

"Алгоритм должен быть устойчив к большим файлам, не помещающимся целиком в оперативную память."

Приложение просто считывает все данные из файлов, потом сортировкой слиянием объединяет эти данные.

Пока не придумал, как одновременно считывать кусками из файлов и чтобы эти куски сохраняли порядок в результирующем файле

Один из вариантов решения был: Завести HashMap, где key - файл, value - на каком элементе мы остановились в прошлой итерации и так
по одному элементу выгрузить из всех файлов, затем записать в результат наименьший/наибольший элемент
скорость конечно у такого решения... мде 


